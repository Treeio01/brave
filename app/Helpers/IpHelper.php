<?php

namespace App\Helpers;

class IpHelper
{
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º Cloudflare
     */
    public static function getRealIp()
    {
        $request = request();
        
        // Cloudflare –ø–µ—Ä–µ–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IP –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ CF-Connecting-IP
        if ($request->hasHeader('CF-Connecting-IP')) {
            $ip = $request->header('CF-Connecting-IP');
            if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6)) {
                return $ip;
            }
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∫—Å–∏
        $headers = [
            'HTTP_CF_CONNECTING_IP',     // Cloudflare
            'HTTP_CLIENT_IP',            // Proxy
            'HTTP_X_FORWARDED_FOR',      // Load balancer/proxy
            'HTTP_X_FORWARDED',          // Proxy
            'HTTP_X_CLUSTER_CLIENT_IP',  // Cluster
            'HTTP_FORWARDED_FOR',        // Proxy
            'HTTP_FORWARDED',            // Proxy
            'REMOTE_ADDR'                // Standard
        ];
        
        foreach ($headers as $header) {
            if (!empty($_SERVER[$header])) {
                $ips = explode(',', $_SERVER[$header]);
                $ip = trim($ips[0]);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –≤–∞–ª–∏–¥–Ω—ã–π (IPv4 –∏–ª–∏ IPv6)
                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6)) {
                    // –î–ª—è IPv4 –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
                    if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {
                        if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {
                            return $ip;
                        }
                    } else {
                        // –î–ª—è IPv6 –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ IPv6 —Å–ª–æ–∂–Ω–µ–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å)
                        return $ip;
                    }
                }
            }
        }
        
        // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ Laravel
        return $request->ip();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –ø–æ IP –∞–¥—Ä–µ—Å—É
     */
    public static function getCountryInfo($ip = null)
    {
        if (!$ip) {
            $ip = self::getRealIp();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –≤–∞–ª–∏–¥–Ω—ã–π (IPv4 –∏–ª–∏ IPv6)
        if (!filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4 | FILTER_FLAG_IPV6)) {
            return [
                'country' => 'Unknown',
                'country_code' => 'XX',
                'flag' => 'üè≥Ô∏è'
            ];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (–∫—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 —á–∞—Å)
        $cacheKey = 'ip_country_' . md5($ip);
        $cached = \Cache::get($cacheKey);
        if ($cached) {
            return $cached;
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API ipapi.co —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π IPv6
        try {
            $url = "http://ipapi.co/{$ip}/json/";
            $context = stream_context_create([
                'http' => [
                    'timeout' => 5,
                    'user_agent' => 'Mozilla/5.0 (compatible; BraveApp/1.0)'
                ]
            ]);
            
            $response = file_get_contents($url, false, $context);
            
            if ($response === false) {
                throw new \Exception('Failed to fetch IP info');
            }
            
            $data = json_decode($response, true);
            
            if ($data && isset($data['country_name']) && $data['country_name'] !== null) {
                $result = [
                    'country' => $data['country_name'],
                    'country_code' => $data['country_code'] ?? 'XX',
                    'flag' => self::getCountryFlag($data['country_code'] ?? 'XX'),
                    'city' => $data['city'] ?? null,
                    'region' => $data['region'] ?? null
                ];
                
                // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 1 —á–∞—Å
                \Cache::put($cacheKey, $result, 3600);
                return $result;
            }
        } catch (\Exception $e) {
            // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            \Log::warning('IP geolocation failed for IP: ' . $ip . ' Error: ' . $e->getMessage());
        }
        
        // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π API –¥–ª—è IPv6
        try {
            $url = "http://ip-api.com/json/{$ip}?fields=status,message,country,countryCode,city,region";
            $context = stream_context_create([
                'http' => [
                    'timeout' => 3,
                    'user_agent' => 'Mozilla/5.0 (compatible; BraveApp/1.0)'
                ]
            ]);
            
            $response = file_get_contents($url, false, $context);
            
            if ($response !== false) {
                $data = json_decode($response, true);
                
                if ($data && $data['status'] === 'success' && isset($data['country'])) {
                    $result = [
                        'country' => $data['country'],
                        'country_code' => $data['countryCode'] ?? 'XX',
                        'flag' => self::getCountryFlag($data['countryCode'] ?? 'XX'),
                        'city' => $data['city'] ?? null,
                        'region' => $data['region'] ?? null
                    ];
                    
                    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 1 —á–∞—Å
                    \Cache::put($cacheKey, $result, 3600);
                    return $result;
                }
            }
        } catch (\Exception $e) {
            \Log::warning('Fallback IP geolocation failed for IP: ' . $ip . ' Error: ' . $e->getMessage());
        }
        
        $result = [
            'country' => 'Unknown',
            'country_code' => 'XX',
            'flag' => 'üè≥Ô∏è'
        ];
        
        // –ö—ç—à–∏—Ä—É–µ–º –¥–∞–∂–µ –Ω–µ—É–¥–∞—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 10 –º–∏–Ω—É—Ç
        \Cache::put($cacheKey, $result, 600);
        return $result;
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É
     */
    private static function getCountryFlag($countryCode)
    {
        if (!$countryCode || strlen($countryCode) !== 2) {
            return 'üè≥Ô∏è';
        }
        
        $countryCode = strtoupper($countryCode);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥
        $flag = '';
        for ($i = 0; $i < 2; $i++) {
            $flag .= mb_chr(ord($countryCode[$i]) + 127397, 'UTF-8');
        }
        
        return $flag;
    }
}
