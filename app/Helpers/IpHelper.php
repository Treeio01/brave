<?php

namespace App\Helpers;

class IpHelper
{
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º Cloudflare
     */
    public static function getRealIp()
    {
        $request = request();
        
        // Cloudflare –ø–µ—Ä–µ–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IP –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ CF-Connecting-IP
        if ($request->hasHeader('CF-Connecting-IP')) {
            return $request->header('CF-Connecting-IP');
        }
        
        // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∫—Å–∏
        $headers = [
            'HTTP_CF_CONNECTING_IP',     // Cloudflare
            'HTTP_CLIENT_IP',            // Proxy
            'HTTP_X_FORWARDED_FOR',      // Load balancer/proxy
            'HTTP_X_FORWARDED',          // Proxy
            'HTTP_X_CLUSTER_CLIENT_IP',  // Cluster
            'HTTP_FORWARDED_FOR',        // Proxy
            'HTTP_FORWARDED',            // Proxy
            'REMOTE_ADDR'                // Standard
        ];
        
        foreach ($headers as $header) {
            if (!empty($_SERVER[$header])) {
                $ips = explode(',', $_SERVER[$header]);
                $ip = trim($ips[0]);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –≤–∞–ª–∏–¥–Ω—ã–π –∏ –Ω–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE)) {
                    return $ip;
                }
            }
        }
        
        // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ Laravel
        return $request->ip();
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ –ø–æ IP –∞–¥—Ä–µ—Å—É
     */
    public static function getCountryInfo($ip = null)
    {
        if (!$ip) {
            $ip = self::getRealIp();
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ IP –≤–∞–ª–∏–¥–Ω—ã–π
        if (!filter_var($ip, FILTER_VALIDATE_IP)) {
            return [
                'country' => 'Unknown',
                'country_code' => 'XX',
                'flag' => 'üè≥Ô∏è'
            ];
        }
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API ipapi.co
        try {
            $response = file_get_contents("http://ipapi.co/{$ip}/json/");
            $data = json_decode($response, true);
            
            if ($data && isset($data['country_name'])) {
                return [
                    'country' => $data['country_name'],
                    'country_code' => $data['country_code'],
                    'flag' => self::getCountryFlag($data['country_code']),
                    'city' => $data['city'] ?? null,
                    'region' => $data['region'] ?? null
                ];
            }
        } catch (\Exception $e) {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —Å—Ç—Ä–∞–Ω—É
        }
        
        return [
            'country' => 'Unknown',
            'country_code' => 'XX',
            'flag' => 'üè≥Ô∏è'
        ];
    }
    
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ñ–ª–∞–≥ —Å—Ç—Ä–∞–Ω—ã –ø–æ –∫–æ–¥—É
     */
    private static function getCountryFlag($countryCode)
    {
        if (!$countryCode || strlen($countryCode) !== 2) {
            return 'üè≥Ô∏è';
        }
        
        $countryCode = strtoupper($countryCode);
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ –≤ —ç–º–æ–¥–∑–∏ —Ñ–ª–∞–≥
        $flag = '';
        for ($i = 0; $i < 2; $i++) {
            $flag .= mb_chr(ord($countryCode[$i]) + 127397, 'UTF-8');
        }
        
        return $flag;
    }
}
